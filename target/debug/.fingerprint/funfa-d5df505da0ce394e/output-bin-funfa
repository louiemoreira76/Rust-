{"$message_type":"diagnostic","message":"unresolved import `rand`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":4,"byte_end":8,"line_start":1,"line_end":1,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"use rand::Rng;","highlight_start":5,"highlight_end":9}],"label":"use of undeclared crate or module `rand`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `rand`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand::Rng;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `rand`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `regex`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":20,"byte_end":25,"line_start":2,"line_end":2,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use regex::Regex;","highlight_start":5,"highlight_end":10}],"label":"use of undeclared crate or module `regex`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `regex`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse regex::Regex;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `regex`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `rand`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":3730,"byte_end":3734,"line_start":129,"line_end":129,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"        let numero_conta: u32 = rand::thread_rng().gen_range(1..11); //10","highlight_start":33,"highlight_end":37}],"label":"use of undeclared crate or module `rand`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: use of undeclared crate or module `rand`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:129:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let numero_conta: u32 = rand::thread_rng().gen_range(1..11); //10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `rand`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `&str: FromStr` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":6122,"byte_end":6135,"line_start":198,"line_end":198,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":67,"highlight_end":80}],"label":"the trait `FromStr` is not implemented for `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":5164,"byte_end":5233,"line_start":175,"line_end":175,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4989,"byte_end":5090,"line_start":172,"line_end":172,"column_start":9,"column_end":110,"is_primary":false,"text":[{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":9,"highlight_end":110}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4153,"byte_end":4195,"line_start":140,"line_end":140,"column_start":13,"column_end":55,"is_primary":false,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":13,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":3922,"byte_end":3945,"line_start":134,"line_end":134,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":6691,"byte_end":6718,"line_start":218,"line_end":218,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\main.rs","byte_start":3911,"byte_end":3918,"line_start":132,"line_end":132,"column_start":31,"column_end":38,"is_primary":false,"text":[{"text":"        let mut senha: &str = read!();","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":6641,"byte_end":6658,"line_start":216,"line_end":216,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! read(","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":3887,"byte_end":3908,"line_start":133,"line_end":133,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":3887,"byte_end":3908,"line_start":133,"line_end":133,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4888,"byte_end":4909,"line_start":169,"line_end":169,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4888,"byte_end":4909,"line_start":169,"line_end":169,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4888,"byte_end":4909,"line_start":169,"line_end":169,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `FromStr` is implemented for `String`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `parse_capture`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":2482,"byte_end":2495,"line_start":84,"line_end":84,"column_start":8,"column_end":21,"is_primary":false,"text":[{"text":"pub fn parse_capture<T>(","highlight_start":8,"highlight_end":21}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":2621,"byte_end":2628,"line_start":90,"line_end":90,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    T: FromStr,","highlight_start":8,"highlight_end":15}],"label":"required by this bound in `parse_capture`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `&str: FromStr` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:132:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut senha: &str = read!();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromStr` is not implemented for `&str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `FromStr` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mString\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `parse_capture`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs:90:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m84\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn parse_capture<T>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: FromStr,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `parse_capture`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::try_scan` which comes from the expansion of the macro `read` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `&str: FromStr` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":6122,"byte_end":6135,"line_start":198,"line_end":198,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":67,"highlight_end":80}],"label":"the trait `FromStr` is not implemented for `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":5164,"byte_end":5233,"line_start":175,"line_end":175,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4989,"byte_end":5090,"line_start":172,"line_end":172,"column_start":9,"column_end":110,"is_primary":false,"text":[{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":9,"highlight_end":110}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4153,"byte_end":4195,"line_start":140,"line_end":140,"column_start":13,"column_end":55,"is_primary":false,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":13,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":3922,"byte_end":3945,"line_start":134,"line_end":134,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":6691,"byte_end":6718,"line_start":218,"line_end":218,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\main.rs","byte_start":4077,"byte_end":4084,"line_start":137,"line_end":137,"column_start":25,"column_end":32,"is_primary":false,"text":[{"text":"                senha = read!()","highlight_start":25,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":6641,"byte_end":6658,"line_start":216,"line_end":216,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! read(","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":3887,"byte_end":3908,"line_start":133,"line_end":133,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":3887,"byte_end":3908,"line_start":133,"line_end":133,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4888,"byte_end":4909,"line_start":169,"line_end":169,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4888,"byte_end":4909,"line_start":169,"line_end":169,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":4888,"byte_end":4909,"line_start":169,"line_end":169,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `FromStr` is implemented for `String`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `parse_capture`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":2482,"byte_end":2495,"line_start":84,"line_end":84,"column_start":8,"column_end":21,"is_primary":false,"text":[{"text":"pub fn parse_capture<T>(","highlight_start":8,"highlight_end":21}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs","byte_start":2621,"byte_end":2628,"line_start":90,"line_end":90,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    T: FromStr,","highlight_start":8,"highlight_end":15}],"label":"required by this bound in `parse_capture`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `&str: FromStr` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:137:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                senha = read!()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromStr` is not implemented for `&str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `FromStr` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mString\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `parse_capture`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Â£ui$\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\text_io-0.1.12\\src\\lib.rs:90:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m84\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn parse_capture<T>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: FromStr,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `parse_capture`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::try_scan` which comes from the expansion of the macro `read` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":4340,"byte_end":4345,"line_start":145,"line_end":145,"column_start":76,"column_end":81,"is_primary":true,"text":[{"text":"        Banco::informacoes(numero_conta, tipoC, nome, saldo, status_conta, senha);","highlight_start":76,"highlight_end":81}],"label":"expected `String`, found `&str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":4273,"byte_end":4291,"line_start":145,"line_end":145,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        Banco::informacoes(numero_conta, tipoC, nome, saldo, status_conta, senha);","highlight_start":9,"highlight_end":27}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src\\main.rs","byte_start":347,"byte_end":356,"line_start":18,"line_end":18,"column_start":65,"column_end":74,"is_primary":false,"text":[{"text":"    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {","highlight_start":65,"highlight_end":74}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":290,"byte_end":301,"line_start":18,"line_end":18,"column_start":8,"column_end":19,"is_primary":true,"text":[{"text":"    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {","highlight_start":8,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try using a conversion method","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":4345,"byte_end":4345,"line_start":145,"line_end":145,"column_start":81,"column_end":81,"is_primary":true,"text":[{"text":"        Banco::informacoes(numero_conta, tipoC, nome, saldo, status_conta, senha);","highlight_start":81,"highlight_end":81}],"label":null,"suggested_replacement":".to_string()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:145:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Banco::informacoes(numero_conta, tipoC, nome, saldo, status_conta, senha);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: try using a conversion method: `.to_string()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14marguments to this function are incorrect\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `String`, found `&str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:18:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function takes 6 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":4442,"byte_end":4477,"line_start":149,"line_end":149,"column_start":27,"column_end":62,"is_primary":false,"text":[{"text":"        Banco::informacoes(0, ' ', String::new(), 0.0, false);","highlight_start":27,"highlight_end":62}],"label":"an argument of type `String` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":4424,"byte_end":4442,"line_start":149,"line_end":149,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"        Banco::informacoes(0, ' ', String::new(), 0.0, false);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src\\main.rs","byte_start":302,"byte_end":308,"line_start":18,"line_end":18,"column_start":20,"column_end":26,"is_primary":false,"text":[{"text":"    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {","highlight_start":20,"highlight_end":26}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":310,"byte_end":317,"line_start":18,"line_end":18,"column_start":28,"column_end":35,"is_primary":false,"text":[{"text":"    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {","highlight_start":28,"highlight_end":35}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":319,"byte_end":328,"line_start":18,"line_end":18,"column_start":37,"column_end":46,"is_primary":false,"text":[{"text":"    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {","highlight_start":37,"highlight_end":46}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":330,"byte_end":336,"line_start":18,"line_end":18,"column_start":48,"column_end":54,"is_primary":false,"text":[{"text":"    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {","highlight_start":48,"highlight_end":54}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":338,"byte_end":345,"line_start":18,"line_end":18,"column_start":56,"column_end":63,"is_primary":false,"text":[{"text":"    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {","highlight_start":56,"highlight_end":63}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":347,"byte_end":356,"line_start":18,"line_end":18,"column_start":65,"column_end":74,"is_primary":false,"text":[{"text":"    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {","highlight_start":65,"highlight_end":74}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":290,"byte_end":301,"line_start":18,"line_end":18,"column_start":8,"column_end":19,"is_primary":true,"text":[{"text":"    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {","highlight_start":8,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":4442,"byte_end":4477,"line_start":149,"line_end":149,"column_start":27,"column_end":62,"is_primary":true,"text":[{"text":"        Banco::informacoes(0, ' ', String::new(), 0.0, false);","highlight_start":27,"highlight_end":62}],"label":null,"suggested_replacement":"(0, ' ', String::new(), 0.0, false, /* String */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function takes 6 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:149:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Banco::informacoes(0, ' ', String::new(), 0.0, false);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14man argument of type `String` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:18:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn informacoes(n: u32, t: char, d: String, m: f64, s: bool, p: String) -> Banco {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        Banco::informacoes\u001b[0m\u001b[0m\u001b[38;5;10m(0, ' ', String::new(), 0.0, false, /* String */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 7 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 7 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0277, E0308, E0432, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0061, E0277, E0308, E0432, E0433.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
